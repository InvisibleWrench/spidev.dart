import 'epoll_event.dart';
// ignore_for_file: non_constant_identifier_names, camel_case_types, unnecessary_brace_in_string_interps, unused_element

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

class LibCInternal64 {
  /// Holds the Dynamic library.
  final ffi.DynamicLibrary _dylib;

  /// The symbols are looked up in [dynamicLibrary].
  LibCInternal64(ffi.DynamicLibrary dynamicLibrary) : _dylib = dynamicLibrary;

  int ioctl(
    int __fd,
    int __request,
  ) {
    _ioctl ??= _dylib.lookupFunction<_c_ioctl, _dart_ioctl>('ioctl');
    return _ioctl(
      __fd,
      __request,
    );
  }

  _dart_ioctl _ioctl;

  int epoll_create(
    int __size,
  ) {
    _epoll_create ??= _dylib
        .lookupFunction<_c_epoll_create, _dart_epoll_create>('epoll_create');
    return _epoll_create(
      __size,
    );
  }

  _dart_epoll_create _epoll_create;

  int epoll_create1(
    int __flags,
  ) {
    _epoll_create1 ??= _dylib
        .lookupFunction<_c_epoll_create1, _dart_epoll_create1>('epoll_create1');
    return _epoll_create1(
      __flags,
    );
  }

  _dart_epoll_create1 _epoll_create1;

  int epoll_ctl(
    int __epfd,
    int __op,
    int __fd,
    ffi.Pointer<epoll_event> __event,
  ) {
    _epoll_ctl ??=
        _dylib.lookupFunction<_c_epoll_ctl, _dart_epoll_ctl>('epoll_ctl');
    return _epoll_ctl(
      __epfd,
      __op,
      __fd,
      __event,
    );
  }

  _dart_epoll_ctl _epoll_ctl;

  int epoll_wait(
    int __epfd,
    ffi.Pointer<epoll_event> __events,
    int __maxevents,
    int __timeout,
  ) {
    _epoll_wait ??=
        _dylib.lookupFunction<_c_epoll_wait, _dart_epoll_wait>('epoll_wait');
    return _epoll_wait(
      __epfd,
      __events,
      __maxevents,
      __timeout,
    );
  }

  _dart_epoll_wait _epoll_wait;

  ffi.Pointer<ffi.Int32> __errno_location() {
    ___errno_location ??=
        _dylib.lookupFunction<_c___errno_location, _dart___errno_location>(
            '__errno_location');
    return ___errno_location();
  }

  _dart___errno_location ___errno_location;

  int open(
    ffi.Pointer<ffi.Int8> __file,
    int __oflag,
  ) {
    _open ??= _dylib.lookupFunction<_c_open, _dart_open>('open');
    return _open(
      __file,
      __oflag,
    );
  }

  _dart_open _open;

  int close(
    int __fd,
  ) {
    _close ??= _dylib.lookupFunction<_c_close, _dart_close>('close');
    return _close(
      __fd,
    );
  }

  _dart_close _close;

  int read(
    int __fd,
    ffi.Pointer<ffi.Void> __buf,
    int __nbytes,
  ) {
    _read ??= _dylib.lookupFunction<_c_read, _dart_read>('read');
    return _read(
      __fd,
      __buf,
      __nbytes,
    );
  }

  _dart_read _read;
}

typedef _c_ioctl = ffi.Int32 Function(
  ffi.Int32 __fd,
  ffi.Uint64 __request,
);

typedef _dart_ioctl = int Function(
  int __fd,
  int __request,
);

typedef _c_epoll_create = ffi.Int32 Function(
  ffi.Int32 __size,
);

typedef _dart_epoll_create = int Function(
  int __size,
);

typedef _c_epoll_create1 = ffi.Int32 Function(
  ffi.Int32 __flags,
);

typedef _dart_epoll_create1 = int Function(
  int __flags,
);

typedef _c_epoll_ctl = ffi.Int32 Function(
  ffi.Int32 __epfd,
  ffi.Int32 __op,
  ffi.Int32 __fd,
  ffi.Pointer<epoll_event> __event,
);

typedef _dart_epoll_ctl = int Function(
  int __epfd,
  int __op,
  int __fd,
  ffi.Pointer<epoll_event> __event,
);

typedef _c_epoll_wait = ffi.Int32 Function(
  ffi.Int32 __epfd,
  ffi.Pointer<epoll_event> __events,
  ffi.Int32 __maxevents,
  ffi.Int32 __timeout,
);

typedef _dart_epoll_wait = int Function(
  int __epfd,
  ffi.Pointer<epoll_event> __events,
  int __maxevents,
  int __timeout,
);

typedef _c___errno_location = ffi.Pointer<ffi.Int32> Function();

typedef _dart___errno_location = ffi.Pointer<ffi.Int32> Function();

typedef _c_open = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __file,
  ffi.Int32 __oflag,
);

typedef _dart_open = int Function(
  ffi.Pointer<ffi.Int8> __file,
  int __oflag,
);

typedef _c_close = ffi.Int32 Function(
  ffi.Int32 __fd,
);

typedef _dart_close = int Function(
  int __fd,
);

typedef _c_read = ffi.Int64 Function(
  ffi.Int32 __fd,
  ffi.Pointer<ffi.Void> __buf,
  ffi.Uint64 __nbytes,
);

typedef _dart_read = int Function(
  int __fd,
  ffi.Pointer<ffi.Void> __buf,
  int __nbytes,
);
